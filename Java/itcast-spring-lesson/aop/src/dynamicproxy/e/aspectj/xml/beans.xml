<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--1 创建目标类-->
    <bean id="userServiceId" class="dynamicproxy.e.aspectj.xml.UserServiceImpl" />
    <!--2 创建切面类-->
    <bean id="myAspectId" class="dynamicproxy.e.aspectj.xml.MyAspect" />
    <!--3 aop 编程
        <aop:aspect> 将切面类（这里就是 myAspectId）声明成“切面”，从而获得通知（myAspectId 的方法）
            ref 为切面类的引用
        <aop:pointcut> 声明一个切入点，所有的通知都可以使用
            expression 切入点表达式
            id 名称，用于其他通知引用
    -->
    <aop:config proxy-target-class="true">
        <aop:aspect ref="myAspectId">
            <!--这个切入点告诉我们，目标类 UserService 中的所有的切入点（方法）都可以-->
            <aop:pointcut id="myPointCut" expression="execution(* dynamicproxy.e.aspectj.xml.UserServiceImpl.*(..))"/>
            <!--3.1 前置通知
                <aop:before method="" pointcut="" pointcut-ref=""/>
                  method: 通知，即方法名
                  pointcut: 切入点表达式，此表达式只能当前通知使用
                  pointcut-ref: 切入点引用，可以余其他通知共享切入点（和 ponitcut 二选一）
                通知方法可以有参数,格式:public void before(JoinPoint joinPoint)
                  参数1: org.aspectj.lang.JoinPoint 用于描述连接点(目标方法),获得目标方法名等
            -->
            <aop:before method="before" pointcut-ref="myPointCut"/>
        </aop:aspect>
    </aop:config>
</beans>